/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Sirberus API
 * API for managing systemd services and containers
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from '@tanstack/react-query';

import * as axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type { ErrorResponse, Message, SystemdServiceDetails, SystemdServiceList } from '.././model';

/**
 * Get a list of all systemd services
 * @summary List systemd services
 */
export const getSystemd = (options?: AxiosRequestConfig): Promise<AxiosResponse<SystemdServiceList>> => {
	return axios.default.get(`/systemd`, options);
};

export const getGetSystemdQueryKey = () => {
	return [`/systemd`] as const;
};

export const getGetSystemdQueryOptions = <
	TData = Awaited<ReturnType<typeof getSystemd>>,
	TError = AxiosError<ErrorResponse>,
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSystemd>>, TError, TData>>;
	axios?: AxiosRequestConfig;
}) => {
	const { query: queryOptions, axios: axiosOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetSystemdQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getSystemd>>> = ({ signal }) =>
		getSystemd({ signal, ...axiosOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getSystemd>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSystemdQueryResult = NonNullable<Awaited<ReturnType<typeof getSystemd>>>;
export type GetSystemdQueryError = AxiosError<ErrorResponse>;

export function useGetSystemd<
	TData = Awaited<ReturnType<typeof getSystemd>>,
	TError = AxiosError<ErrorResponse>,
>(options: {
	query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSystemd>>, TError, TData>> &
		Pick<
			DefinedInitialDataOptions<Awaited<ReturnType<typeof getSystemd>>, TError, Awaited<ReturnType<typeof getSystemd>>>,
			'initialData'
		>;
	axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSystemd<
	TData = Awaited<ReturnType<typeof getSystemd>>,
	TError = AxiosError<ErrorResponse>,
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSystemd>>, TError, TData>> &
		Pick<
			UndefinedInitialDataOptions<
				Awaited<ReturnType<typeof getSystemd>>,
				TError,
				Awaited<ReturnType<typeof getSystemd>>
			>,
			'initialData'
		>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSystemd<
	TData = Awaited<ReturnType<typeof getSystemd>>,
	TError = AxiosError<ErrorResponse>,
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSystemd>>, TError, TData>>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary List systemd services
 */

export function useGetSystemd<
	TData = Awaited<ReturnType<typeof getSystemd>>,
	TError = AxiosError<ErrorResponse>,
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSystemd>>, TError, TData>>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetSystemdQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Get detailed information about a specific systemd service
 * @summary Get systemd service details
 */
export const getSystemdName = (
	name: string,
	options?: AxiosRequestConfig
): Promise<AxiosResponse<SystemdServiceDetails>> => {
	return axios.default.get(`/systemd/${name}`, options);
};

export const getGetSystemdNameQueryKey = (name: string) => {
	return [`/systemd/${name}`] as const;
};

export const getGetSystemdNameQueryOptions = <
	TData = Awaited<ReturnType<typeof getSystemdName>>,
	TError = AxiosError<ErrorResponse>,
>(
	name: string,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSystemdName>>, TError, TData>>;
		axios?: AxiosRequestConfig;
	}
) => {
	const { query: queryOptions, axios: axiosOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetSystemdNameQueryKey(name);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getSystemdName>>> = ({ signal }) =>
		getSystemdName(name, { signal, ...axiosOptions });

	return { queryKey, queryFn, enabled: !!name, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getSystemdName>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSystemdNameQueryResult = NonNullable<Awaited<ReturnType<typeof getSystemdName>>>;
export type GetSystemdNameQueryError = AxiosError<ErrorResponse>;

export function useGetSystemdName<
	TData = Awaited<ReturnType<typeof getSystemdName>>,
	TError = AxiosError<ErrorResponse>,
>(
	name: string,
	options: {
		query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSystemdName>>, TError, TData>> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getSystemdName>>,
					TError,
					Awaited<ReturnType<typeof getSystemdName>>
				>,
				'initialData'
			>;
		axios?: AxiosRequestConfig;
	}
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSystemdName<
	TData = Awaited<ReturnType<typeof getSystemdName>>,
	TError = AxiosError<ErrorResponse>,
>(
	name: string,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSystemdName>>, TError, TData>> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getSystemdName>>,
					TError,
					Awaited<ReturnType<typeof getSystemdName>>
				>,
				'initialData'
			>;
		axios?: AxiosRequestConfig;
	}
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSystemdName<
	TData = Awaited<ReturnType<typeof getSystemdName>>,
	TError = AxiosError<ErrorResponse>,
>(
	name: string,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSystemdName>>, TError, TData>>;
		axios?: AxiosRequestConfig;
	}
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get systemd service details
 */

export function useGetSystemdName<
	TData = Awaited<ReturnType<typeof getSystemdName>>,
	TError = AxiosError<ErrorResponse>,
>(
	name: string,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSystemdName>>, TError, TData>>;
		axios?: AxiosRequestConfig;
	}
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetSystemdNameQueryOptions(name, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Restart a systemd service
 * @summary Restart service
 */
export const postSystemdNameRestart = (name: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Message>> => {
	return axios.default.post(`/systemd/${name}/restart`, undefined, options);
};

export const getPostSystemdNameRestartMutationOptions = <
	TError = AxiosError<ErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<Awaited<ReturnType<typeof postSystemdNameRestart>>, TError, { name: string }, TContext>;
	axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postSystemdNameRestart>>, TError, { name: string }, TContext> => {
	const mutationKey = ['postSystemdNameRestart'];
	const { mutation: mutationOptions, axios: axiosOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, axios: undefined };

	const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSystemdNameRestart>>, { name: string }> = props => {
		const { name } = props ?? {};

		return postSystemdNameRestart(name, axiosOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PostSystemdNameRestartMutationResult = NonNullable<Awaited<ReturnType<typeof postSystemdNameRestart>>>;

export type PostSystemdNameRestartMutationError = AxiosError<ErrorResponse>;

/**
 * @summary Restart service
 */
export const usePostSystemdNameRestart = <TError = AxiosError<ErrorResponse>, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<Awaited<ReturnType<typeof postSystemdNameRestart>>, TError, { name: string }, TContext>;
	axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof postSystemdNameRestart>>, TError, { name: string }, TContext> => {
	const mutationOptions = getPostSystemdNameRestartMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * Start a systemd service
 * @summary Start service
 */
export const postSystemdNameStart = (name: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Message>> => {
	return axios.default.post(`/systemd/${name}/start`, undefined, options);
};

export const getPostSystemdNameStartMutationOptions = <
	TError = AxiosError<ErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<Awaited<ReturnType<typeof postSystemdNameStart>>, TError, { name: string }, TContext>;
	axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postSystemdNameStart>>, TError, { name: string }, TContext> => {
	const mutationKey = ['postSystemdNameStart'];
	const { mutation: mutationOptions, axios: axiosOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, axios: undefined };

	const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSystemdNameStart>>, { name: string }> = props => {
		const { name } = props ?? {};

		return postSystemdNameStart(name, axiosOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PostSystemdNameStartMutationResult = NonNullable<Awaited<ReturnType<typeof postSystemdNameStart>>>;

export type PostSystemdNameStartMutationError = AxiosError<ErrorResponse>;

/**
 * @summary Start service
 */
export const usePostSystemdNameStart = <TError = AxiosError<ErrorResponse>, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<Awaited<ReturnType<typeof postSystemdNameStart>>, TError, { name: string }, TContext>;
	axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof postSystemdNameStart>>, TError, { name: string }, TContext> => {
	const mutationOptions = getPostSystemdNameStartMutationOptions(options);

	return useMutation(mutationOptions);
};
/**
 * Stop a systemd service
 * @summary Stop service
 */
export const postSystemdNameStop = (name: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Message>> => {
	return axios.default.post(`/systemd/${name}/stop`, undefined, options);
};

export const getPostSystemdNameStopMutationOptions = <
	TError = AxiosError<ErrorResponse>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<Awaited<ReturnType<typeof postSystemdNameStop>>, TError, { name: string }, TContext>;
	axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof postSystemdNameStop>>, TError, { name: string }, TContext> => {
	const mutationKey = ['postSystemdNameStop'];
	const { mutation: mutationOptions, axios: axiosOptions } = options
		? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, axios: undefined };

	const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSystemdNameStop>>, { name: string }> = props => {
		const { name } = props ?? {};

		return postSystemdNameStop(name, axiosOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PostSystemdNameStopMutationResult = NonNullable<Awaited<ReturnType<typeof postSystemdNameStop>>>;

export type PostSystemdNameStopMutationError = AxiosError<ErrorResponse>;

/**
 * @summary Stop service
 */
export const usePostSystemdNameStop = <TError = AxiosError<ErrorResponse>, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<Awaited<ReturnType<typeof postSystemdNameStop>>, TError, { name: string }, TContext>;
	axios?: AxiosRequestConfig;
}): UseMutationResult<Awaited<ReturnType<typeof postSystemdNameStop>>, TError, { name: string }, TContext> => {
	const mutationOptions = getPostSystemdNameStopMutationOptions(options);

	return useMutation(mutationOptions);
};
