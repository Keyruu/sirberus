/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Sirberus API
 * API for managing systemd services and containers
 * OpenAPI spec version: 1.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseQueryOptions,
	UseQueryResult,
} from '@tanstack/react-query';

import * as axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type { ContainerList, ErrorResponse } from '.././model';

/**
 * Get a list of all containers
 * @summary List containers
 */
export const getContainer = (options?: AxiosRequestConfig): Promise<AxiosResponse<ContainerList>> => {
	return axios.default.get(`/container`, options);
};

export const getGetContainerQueryKey = () => {
	return [`/container`] as const;
};

export const getGetContainerQueryOptions = <
	TData = Awaited<ReturnType<typeof getContainer>>,
	TError = AxiosError<ErrorResponse>,
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getContainer>>, TError, TData>>;
	axios?: AxiosRequestConfig;
}) => {
	const { query: queryOptions, axios: axiosOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetContainerQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getContainer>>> = ({ signal }) =>
		getContainer({ signal, ...axiosOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getContainer>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetContainerQueryResult = NonNullable<Awaited<ReturnType<typeof getContainer>>>;
export type GetContainerQueryError = AxiosError<ErrorResponse>;

export function useGetContainer<
	TData = Awaited<ReturnType<typeof getContainer>>,
	TError = AxiosError<ErrorResponse>,
>(options: {
	query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getContainer>>, TError, TData>> &
		Pick<
			DefinedInitialDataOptions<
				Awaited<ReturnType<typeof getContainer>>,
				TError,
				Awaited<ReturnType<typeof getContainer>>
			>,
			'initialData'
		>;
	axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetContainer<
	TData = Awaited<ReturnType<typeof getContainer>>,
	TError = AxiosError<ErrorResponse>,
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getContainer>>, TError, TData>> &
		Pick<
			UndefinedInitialDataOptions<
				Awaited<ReturnType<typeof getContainer>>,
				TError,
				Awaited<ReturnType<typeof getContainer>>
			>,
			'initialData'
		>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetContainer<
	TData = Awaited<ReturnType<typeof getContainer>>,
	TError = AxiosError<ErrorResponse>,
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getContainer>>, TError, TData>>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary List containers
 */

export function useGetContainer<
	TData = Awaited<ReturnType<typeof getContainer>>,
	TError = AxiosError<ErrorResponse>,
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getContainer>>, TError, TData>>;
	axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
	const queryOptions = getGetContainerQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}
